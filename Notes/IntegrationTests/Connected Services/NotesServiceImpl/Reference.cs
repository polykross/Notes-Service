//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Notes.IntegrationTests.NotesServiceImpl {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerDTO", Namespace="http://schemas.datacontract.org/2004/07/Notes.CommunicationContract")]
    [System.SerializableAttribute()]
    public partial class CustomerDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid GuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastLoginDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((this.GuidField.Equals(value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastLoginDate {
            get {
                return this.LastLoginDateField;
            }
            set {
                if ((this.LastLoginDateField.Equals(value) != true)) {
                    this.LastLoginDateField = value;
                    this.RaisePropertyChanged("LastLoginDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShortNoteDTO", Namespace="http://schemas.datacontract.org/2004/07/Notes.CommunicationContract")]
    [System.SerializableAttribute()]
    public partial class ShortNoteDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid GuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((this.GuidField.Equals(value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoteDTO", Namespace="http://schemas.datacontract.org/2004/07/Notes.CommunicationContract")]
    [System.SerializableAttribute()]
    public partial class NoteDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid GuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastEditDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((this.GuidField.Equals(value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastEditDate {
            get {
                return this.LastEditDateField;
            }
            set {
                if ((this.LastEditDateField.Equals(value) != true)) {
                    this.LastEditDateField = value;
                    this.RaisePropertyChanged("LastEditDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotesServiceImpl.INotesService")]
    public interface INotesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/LoginExists", ReplyAction="http://tempuri.org/INotesService/LoginExistsResponse")]
        bool LoginExists(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/LoginExists", ReplyAction="http://tempuri.org/INotesService/LoginExistsResponse")]
        System.Threading.Tasks.Task<bool> LoginExistsAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/Register", ReplyAction="http://tempuri.org/INotesService/RegisterResponse")]
        Notes.IntegrationTests.NotesServiceImpl.CustomerDTO Register(Notes.IntegrationTests.NotesServiceImpl.CustomerDTO customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/Register", ReplyAction="http://tempuri.org/INotesService/RegisterResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.CustomerDTO> RegisterAsync(Notes.IntegrationTests.NotesServiceImpl.CustomerDTO customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/Login", ReplyAction="http://tempuri.org/INotesService/LoginResponse")]
        Notes.IntegrationTests.NotesServiceImpl.CustomerDTO Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/Login", ReplyAction="http://tempuri.org/INotesService/LoginResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.CustomerDTO> LoginAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/GetNotes", ReplyAction="http://tempuri.org/INotesService/GetNotesResponse")]
        Notes.IntegrationTests.NotesServiceImpl.ShortNoteDTO[] GetNotes(System.Guid customerGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/GetNotes", ReplyAction="http://tempuri.org/INotesService/GetNotesResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.ShortNoteDTO[]> GetNotesAsync(System.Guid customerGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/GetNote", ReplyAction="http://tempuri.org/INotesService/GetNoteResponse")]
        Notes.IntegrationTests.NotesServiceImpl.NoteDTO GetNote(System.Guid guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/GetNote", ReplyAction="http://tempuri.org/INotesService/GetNoteResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.NoteDTO> GetNoteAsync(System.Guid guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/AddNote", ReplyAction="http://tempuri.org/INotesService/AddNoteResponse")]
        Notes.IntegrationTests.NotesServiceImpl.NoteDTO AddNote(Notes.IntegrationTests.NotesServiceImpl.NoteDTO note, System.Guid customerGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/AddNote", ReplyAction="http://tempuri.org/INotesService/AddNoteResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.NoteDTO> AddNoteAsync(Notes.IntegrationTests.NotesServiceImpl.NoteDTO note, System.Guid customerGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/UpdateNote", ReplyAction="http://tempuri.org/INotesService/UpdateNoteResponse")]
        Notes.IntegrationTests.NotesServiceImpl.NoteDTO UpdateNote(Notes.IntegrationTests.NotesServiceImpl.NoteDTO note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/UpdateNote", ReplyAction="http://tempuri.org/INotesService/UpdateNoteResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.NoteDTO> UpdateNoteAsync(Notes.IntegrationTests.NotesServiceImpl.NoteDTO note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/DeleteNote", ReplyAction="http://tempuri.org/INotesService/DeleteNoteResponse")]
        bool DeleteNote(System.Guid guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/DeleteNote", ReplyAction="http://tempuri.org/INotesService/DeleteNoteResponse")]
        System.Threading.Tasks.Task<bool> DeleteNoteAsync(System.Guid guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotesServiceChannel : Notes.IntegrationTests.NotesServiceImpl.INotesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotesServiceClient : System.ServiceModel.ClientBase<Notes.IntegrationTests.NotesServiceImpl.INotesService>, Notes.IntegrationTests.NotesServiceImpl.INotesService {
        
        public NotesServiceClient() {
        }
        
        public NotesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool LoginExists(string login) {
            return base.Channel.LoginExists(login);
        }
        
        public System.Threading.Tasks.Task<bool> LoginExistsAsync(string login) {
            return base.Channel.LoginExistsAsync(login);
        }
        
        public Notes.IntegrationTests.NotesServiceImpl.CustomerDTO Register(Notes.IntegrationTests.NotesServiceImpl.CustomerDTO customer) {
            return base.Channel.Register(customer);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.CustomerDTO> RegisterAsync(Notes.IntegrationTests.NotesServiceImpl.CustomerDTO customer) {
            return base.Channel.RegisterAsync(customer);
        }
        
        public Notes.IntegrationTests.NotesServiceImpl.CustomerDTO Login(string login1, string password) {
            return base.Channel.Login(login1, password);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.CustomerDTO> LoginAsync(string login, string password) {
            return base.Channel.LoginAsync(login, password);
        }
        
        public Notes.IntegrationTests.NotesServiceImpl.ShortNoteDTO[] GetNotes(System.Guid customerGuid) {
            return base.Channel.GetNotes(customerGuid);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.ShortNoteDTO[]> GetNotesAsync(System.Guid customerGuid) {
            return base.Channel.GetNotesAsync(customerGuid);
        }
        
        public Notes.IntegrationTests.NotesServiceImpl.NoteDTO GetNote(System.Guid guid) {
            return base.Channel.GetNote(guid);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.NoteDTO> GetNoteAsync(System.Guid guid) {
            return base.Channel.GetNoteAsync(guid);
        }
        
        public Notes.IntegrationTests.NotesServiceImpl.NoteDTO AddNote(Notes.IntegrationTests.NotesServiceImpl.NoteDTO note, System.Guid customerGuid) {
            return base.Channel.AddNote(note, customerGuid);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.NoteDTO> AddNoteAsync(Notes.IntegrationTests.NotesServiceImpl.NoteDTO note, System.Guid customerGuid) {
            return base.Channel.AddNoteAsync(note, customerGuid);
        }
        
        public Notes.IntegrationTests.NotesServiceImpl.NoteDTO UpdateNote(Notes.IntegrationTests.NotesServiceImpl.NoteDTO note) {
            return base.Channel.UpdateNote(note);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceImpl.NoteDTO> UpdateNoteAsync(Notes.IntegrationTests.NotesServiceImpl.NoteDTO note) {
            return base.Channel.UpdateNoteAsync(note);
        }
        
        public bool DeleteNote(System.Guid guid) {
            return base.Channel.DeleteNote(guid);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteNoteAsync(System.Guid guid) {
            return base.Channel.DeleteNoteAsync(guid);
        }
    }
}
