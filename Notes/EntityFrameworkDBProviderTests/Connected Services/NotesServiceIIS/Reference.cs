//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Notes.IntegrationTests.NotesServiceIIS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientCustomerDTO", Namespace="http://schemas.datacontract.org/2004/07/Notes.DTO")]
    [System.SerializableAttribute()]
    public partial class ClientCustomerDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string firstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string loginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.firstNameField, value) != true)) {
                    this.firstNameField = value;
                    this.RaisePropertyChanged("firstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastNameField, value) != true)) {
                    this.lastNameField = value;
                    this.RaisePropertyChanged("lastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string login {
            get {
                return this.loginField;
            }
            set {
                if ((object.ReferenceEquals(this.loginField, value) != true)) {
                    this.loginField = value;
                    this.RaisePropertyChanged("login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceCustomerDTO", Namespace="http://schemas.datacontract.org/2004/07/Notes.DTO")]
    [System.SerializableAttribute()]
    public partial class ServiceCustomerDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string firstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime lastLoginDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string loginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.firstNameField, value) != true)) {
                    this.firstNameField = value;
                    this.RaisePropertyChanged("firstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime lastLoginDate {
            get {
                return this.lastLoginDateField;
            }
            set {
                if ((this.lastLoginDateField.Equals(value) != true)) {
                    this.lastLoginDateField = value;
                    this.RaisePropertyChanged("lastLoginDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastNameField, value) != true)) {
                    this.lastNameField = value;
                    this.RaisePropertyChanged("lastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string login {
            get {
                return this.loginField;
            }
            set {
                if ((object.ReferenceEquals(this.loginField, value) != true)) {
                    this.loginField = value;
                    this.RaisePropertyChanged("login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizationDTO", Namespace="http://schemas.datacontract.org/2004/07/Notes.DTO")]
    [System.SerializableAttribute()]
    public partial class AuthorizationDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string loginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string login {
            get {
                return this.loginField;
            }
            set {
                if ((object.ReferenceEquals(this.loginField, value) != true)) {
                    this.loginField = value;
                    this.RaisePropertyChanged("login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShortNoteDTO", Namespace="http://schemas.datacontract.org/2004/07/Notes.DTO")]
    [System.SerializableAttribute()]
    public partial class ShortNoteDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string titleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoteDTO", Namespace="http://schemas.datacontract.org/2004/07/Notes.DTO")]
    [System.SerializableAttribute()]
    public partial class NoteDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime creationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime lastEditDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string textField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string titleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime creationDate {
            get {
                return this.creationDateField;
            }
            set {
                if ((this.creationDateField.Equals(value) != true)) {
                    this.creationDateField = value;
                    this.RaisePropertyChanged("creationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime lastEditDate {
            get {
                return this.lastEditDateField;
            }
            set {
                if ((this.lastEditDateField.Equals(value) != true)) {
                    this.lastEditDateField = value;
                    this.RaisePropertyChanged("lastEditDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string text {
            get {
                return this.textField;
            }
            set {
                if ((object.ReferenceEquals(this.textField, value) != true)) {
                    this.textField = value;
                    this.RaisePropertyChanged("text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotesServiceIIS.INotesService")]
    public interface INotesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/CustomerRegistration", ReplyAction="http://tempuri.org/INotesService/CustomerRegistrationResponse")]
        Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO CustomerRegistration(Notes.IntegrationTests.NotesServiceIIS.ClientCustomerDTO info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/CustomerRegistration", ReplyAction="http://tempuri.org/INotesService/CustomerRegistrationResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO> CustomerRegistrationAsync(Notes.IntegrationTests.NotesServiceIIS.ClientCustomerDTO info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/UpdateCustomer", ReplyAction="http://tempuri.org/INotesService/UpdateCustomerResponse")]
        Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO UpdateCustomer(System.Guid guid, Notes.IntegrationTests.NotesServiceIIS.ClientCustomerDTO customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/UpdateCustomer", ReplyAction="http://tempuri.org/INotesService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO> UpdateCustomerAsync(System.Guid guid, Notes.IntegrationTests.NotesServiceIIS.ClientCustomerDTO customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/DeleteCustomer", ReplyAction="http://tempuri.org/INotesService/DeleteCustomerResponse")]
        void DeleteCustomer(System.Guid guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/DeleteCustomer", ReplyAction="http://tempuri.org/INotesService/DeleteCustomerResponse")]
        System.Threading.Tasks.Task DeleteCustomerAsync(System.Guid guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/Login", ReplyAction="http://tempuri.org/INotesService/LoginResponse")]
        Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO Login(Notes.IntegrationTests.NotesServiceIIS.AuthorizationDTO authorizationInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/Login", ReplyAction="http://tempuri.org/INotesService/LoginResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO> LoginAsync(Notes.IntegrationTests.NotesServiceIIS.AuthorizationDTO authorizationInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/GetCustomersShortNotes", ReplyAction="http://tempuri.org/INotesService/GetCustomersShortNotesResponse")]
        Notes.IntegrationTests.NotesServiceIIS.ShortNoteDTO[] GetCustomersShortNotes(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/GetCustomersShortNotes", ReplyAction="http://tempuri.org/INotesService/GetCustomersShortNotesResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.ShortNoteDTO[]> GetCustomersShortNotesAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/AddNote", ReplyAction="http://tempuri.org/INotesService/AddNoteResponse")]
        Notes.IntegrationTests.NotesServiceIIS.NoteDTO AddNote(string login, string title, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/AddNote", ReplyAction="http://tempuri.org/INotesService/AddNoteResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.NoteDTO> AddNoteAsync(string login, string title, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/EditNote", ReplyAction="http://tempuri.org/INotesService/EditNoteResponse")]
        Notes.IntegrationTests.NotesServiceIIS.NoteDTO EditNote(System.Guid id, string title, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/EditNote", ReplyAction="http://tempuri.org/INotesService/EditNoteResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.NoteDTO> EditNoteAsync(System.Guid id, string title, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/EditNoteTitle", ReplyAction="http://tempuri.org/INotesService/EditNoteTitleResponse")]
        Notes.IntegrationTests.NotesServiceIIS.NoteDTO EditNoteTitle(System.Guid id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/EditNoteTitle", ReplyAction="http://tempuri.org/INotesService/EditNoteTitleResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.NoteDTO> EditNoteTitleAsync(System.Guid id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/EditNoteText", ReplyAction="http://tempuri.org/INotesService/EditNoteTextResponse")]
        Notes.IntegrationTests.NotesServiceIIS.NoteDTO EditNoteText(System.Guid id, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/EditNoteText", ReplyAction="http://tempuri.org/INotesService/EditNoteTextResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.NoteDTO> EditNoteTextAsync(System.Guid id, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/GetNote", ReplyAction="http://tempuri.org/INotesService/GetNoteResponse")]
        Notes.IntegrationTests.NotesServiceIIS.NoteDTO GetNote(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotesService/GetNote", ReplyAction="http://tempuri.org/INotesService/GetNoteResponse")]
        System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.NoteDTO> GetNoteAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotesServiceChannel : Notes.IntegrationTests.NotesServiceIIS.INotesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotesServiceClient : System.ServiceModel.ClientBase<Notes.IntegrationTests.NotesServiceIIS.INotesService>, Notes.IntegrationTests.NotesServiceIIS.INotesService {
        
        public NotesServiceClient() {
        }
        
        public NotesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO CustomerRegistration(Notes.IntegrationTests.NotesServiceIIS.ClientCustomerDTO info) {
            return base.Channel.CustomerRegistration(info);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO> CustomerRegistrationAsync(Notes.IntegrationTests.NotesServiceIIS.ClientCustomerDTO info) {
            return base.Channel.CustomerRegistrationAsync(info);
        }
        
        public Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO UpdateCustomer(System.Guid guid, Notes.IntegrationTests.NotesServiceIIS.ClientCustomerDTO customer) {
            return base.Channel.UpdateCustomer(guid, customer);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO> UpdateCustomerAsync(System.Guid guid, Notes.IntegrationTests.NotesServiceIIS.ClientCustomerDTO customer) {
            return base.Channel.UpdateCustomerAsync(guid, customer);
        }
        
        public void DeleteCustomer(System.Guid guid) {
            base.Channel.DeleteCustomer(guid);
        }
        
        public System.Threading.Tasks.Task DeleteCustomerAsync(System.Guid guid) {
            return base.Channel.DeleteCustomerAsync(guid);
        }
        
        public Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO Login(Notes.IntegrationTests.NotesServiceIIS.AuthorizationDTO authorizationInformation) {
            return base.Channel.Login(authorizationInformation);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.ServiceCustomerDTO> LoginAsync(Notes.IntegrationTests.NotesServiceIIS.AuthorizationDTO authorizationInformation) {
            return base.Channel.LoginAsync(authorizationInformation);
        }
        
        public Notes.IntegrationTests.NotesServiceIIS.ShortNoteDTO[] GetCustomersShortNotes(string login) {
            return base.Channel.GetCustomersShortNotes(login);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.ShortNoteDTO[]> GetCustomersShortNotesAsync(string login) {
            return base.Channel.GetCustomersShortNotesAsync(login);
        }
        
        public Notes.IntegrationTests.NotesServiceIIS.NoteDTO AddNote(string login, string title, string text) {
            return base.Channel.AddNote(login, title, text);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.NoteDTO> AddNoteAsync(string login, string title, string text) {
            return base.Channel.AddNoteAsync(login, title, text);
        }
        
        public Notes.IntegrationTests.NotesServiceIIS.NoteDTO EditNote(System.Guid id, string title, string text) {
            return base.Channel.EditNote(id, title, text);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.NoteDTO> EditNoteAsync(System.Guid id, string title, string text) {
            return base.Channel.EditNoteAsync(id, title, text);
        }
        
        public Notes.IntegrationTests.NotesServiceIIS.NoteDTO EditNoteTitle(System.Guid id, string title) {
            return base.Channel.EditNoteTitle(id, title);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.NoteDTO> EditNoteTitleAsync(System.Guid id, string title) {
            return base.Channel.EditNoteTitleAsync(id, title);
        }
        
        public Notes.IntegrationTests.NotesServiceIIS.NoteDTO EditNoteText(System.Guid id, string text) {
            return base.Channel.EditNoteText(id, text);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.NoteDTO> EditNoteTextAsync(System.Guid id, string text) {
            return base.Channel.EditNoteTextAsync(id, text);
        }
        
        public Notes.IntegrationTests.NotesServiceIIS.NoteDTO GetNote(System.Guid id) {
            return base.Channel.GetNote(id);
        }
        
        public System.Threading.Tasks.Task<Notes.IntegrationTests.NotesServiceIIS.NoteDTO> GetNoteAsync(System.Guid id) {
            return base.Channel.GetNoteAsync(id);
        }
    }
}
